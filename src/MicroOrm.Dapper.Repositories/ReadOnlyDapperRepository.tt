<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace MicroOrm.Dapper.Repositories
{
<#
//Tuple.Create("ame", "parameters", "arguments", "generic type", "return type", "comment", "terminal method")
var readonlyMethods = new[]
{
    Tuple.Create("Count", "",
        "transaction: null", "", "int",
        @"/// <summary>
        ///     Get number of rows
        /// </summary>", false),
    Tuple.Create("Count", "IDbTransaction transaction",
        "null, transaction", "", "int",
        @"/// <summary>
        ///     Get number of rows
        /// </summary>", false),
    Tuple.Create("Count", "Expression<Func<TEntity, bool>> predicate",
        "predicate, transaction: null", "", "int",
        @"/// <summary>
        ///     Get number of rows with WHERE clause
        /// </summary>", false),
    Tuple.Create("Count", "Expression<Func<TEntity, bool>> predicate, IDbTransaction transaction",
        "predicate, transaction", "", "int",
        @"/// <summary>
        ///     Get number of rows with WHERE clause
        /// </summary>", true),
    Tuple.Create("Count", "Expression<Func<TEntity, object>> distinctField",
        "distinctField, transaction: null", "", "int",
        @"/// <summary>
        ///     Get number of rows with DISTINCT clause
        /// </summary>", false),
    Tuple.Create("Count", "Expression<Func<TEntity, object>> distinctField, IDbTransaction transaction",
        "null, distinctField, transaction", "", "int",
        @"/// <summary>
        ///     Get number of rows with DISTINCT clause
        /// </summary>", false),
    Tuple.Create("Count", "Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, object>> distinctField",
        "predicate, distinctField, transaction: null", "", "int",
        @"/// <summary>
        ///     Get number of rows with DISTINCT and WHERE clause
        /// </summary>", false),
    Tuple.Create("Count", "Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, object>> distinctField, IDbTransaction transaction",
        "predicate, distinctField, transaction", "", "int",
        @"/// <summary>
        ///     Get number of rows with DISTINCT and WHERE clause
        /// </summary>", true),

    Tuple.Create("Find", "",
        "null, null", "", "TEntity",
        @"/// <summary>
        ///     Get first object
        /// </summary>", false),
    Tuple.Create("Find", "IDbTransaction transaction",
        "null, transaction", "", "TEntity",
        @"/// <summary>
        ///     Get first object
        /// </summary>", false),
    Tuple.Create("Find", "Expression<Func<TEntity, bool>> predicate",
        "predicate, null", "", "TEntity",
        @"/// <summary>
        ///     Get first object
        /// </summary>", false),
    Tuple.Create("Find", "Expression<Func<TEntity, bool>> predicate, IDbTransaction transaction",
        "predicate, transaction", "", "TEntity",
        @"/// <summary>
        ///     Get first object
        /// </summary>", true),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1",
        "predicate, tChild1, null", "<TChild1>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", false),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            IDbTransaction transaction",
        "predicate, tChild1, transaction", "<TChild1>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", true),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2",
        "predicate, tChild1, tChild2, null", "<TChild1, TChild2>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", false),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, transaction", "<TChild1, TChild2>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", true),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3",
        "predicate, tChild1, tChild2, tChild3, null", "<TChild1, TChild2, TChild3>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", false),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, transaction", "<TChild1, TChild2, TChild3>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", true),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4",
        "predicate, tChild1, tChild2, tChild3, tChild4, null", "<TChild1, TChild2, TChild3, TChild4>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", false),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, tChild4, transaction", "<TChild1, TChild2, TChild3, TChild4>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", true),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, null", "<TChild1, TChild2, TChild3, TChild4, TChild5>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", false),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, transaction", "<TChild1, TChild2, TChild3, TChild4, TChild5>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", true),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            Expression<Func<TEntity, object>> tChild6",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, tChild6, null", "<TChild1, TChild2, TChild3, TChild4, TChild5, TChild6>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", false),
    Tuple.Create("Find", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            Expression<Func<TEntity, object>> tChild6,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, tChild6, transaction", "<TChild1, TChild2, TChild3, TChild4, TChild5, TChild6>", "TEntity",
        @"/// <summary>
        ///     Get first object with join objects
        /// </summary>", true),

    Tuple.Create("FindAll", "",
        "null, transaction: null", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects
        /// </summary>", false),
    Tuple.Create("FindAll", "IDbTransaction transaction",
        "null, transaction", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects
        /// </summary>", false),
    Tuple.Create("FindAll", "Expression<Func<TEntity, bool>> predicate",
        "predicate, transaction: null", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects
        /// </summary>", false),
    Tuple.Create("FindAll", "Expression<Func<TEntity, bool>> predicate, IDbTransaction transaction",
        "predicate, transaction", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects
        /// </summary>", true),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1",
        "predicate, tChild1, null", "<TChild1>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", false),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            IDbTransaction transaction",
        "predicate, tChild1, transaction", "<TChild1>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", true),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2",
        "predicate, tChild1, tChild2, null", "<TChild1, TChild2>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", false),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, transaction", "<TChild1, TChild2>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", true),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3",
        "predicate, tChild1, tChild2, tChild3, null", "<TChild1, TChild2, TChild3>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", false),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, transaction", "<TChild1, TChild2, TChild3>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", true),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4",
        "predicate, tChild1, tChild2, tChild3, tChild4, null", "<TChild1, TChild2, TChild3, TChild4>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", false),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, tChild4, transaction", "<TChild1, TChild2, TChild3, TChild4>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", true),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, null", "<TChild1, TChild2, TChild3, TChild4, TChild5>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", false),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, transaction", "<TChild1, TChild2, TChild3, TChild4, TChild5>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", true),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            Expression<Func<TEntity, object>> tChild6",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, tChild6, null", "<TChild1, TChild2, TChild3, TChild4, TChild5, TChild6>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", false),
    Tuple.Create("FindAll", @"Expression<Func<TEntity, bool>> predicate,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            Expression<Func<TEntity, object>> tChild6,
            IDbTransaction transaction",
        "predicate, tChild1, tChild2, tChild3, tChild4, tChild5, tChild6, transaction", "<TChild1, TChild2, TChild3, TChild4, TChild5, TChild6>", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with join objects
        /// </summary>", true),

    Tuple.Create("FindById", "object id",
        "id, null", "", "TEntity",
        @"/// <summary>
        ///     Get object by Id
        /// </summary>", false),
    Tuple.Create("FindById", "object id, IDbTransaction transaction",
        "id, transaction", "", "TEntity",
        @"/// <summary>
        ///     Get object by Id
        /// </summary>", true),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1",
        "id, tChild1, null", "<TChild1>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", false),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            IDbTransaction transaction",
        "id, tChild1, transaction", "<TChild1>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", true),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2",
        "id, tChild1, tChild2, null", "<TChild1, TChild2>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", false),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            IDbTransaction transaction",
        "id, tChild1, tChild2, transaction", "<TChild1, TChild2>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", true),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3",
        "id, tChild1, tChild2, tChild3, null", "<TChild1, TChild2, TChild3>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", false),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            IDbTransaction transaction",
        "id, tChild1, tChild2, tChild3, transaction", "<TChild1, TChild2, TChild3>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", true),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4",
        "id, tChild1, tChild2, tChild3, tChild4, null", "<TChild1, TChild2, TChild3, TChild4>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", false),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            IDbTransaction transaction",
        "id, tChild1, tChild2, tChild3, tChild4, transaction", "<TChild1, TChild2, TChild3, TChild4>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", true),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5",
        "id, tChild1, tChild2, tChild3, tChild4, tChild5, null", "<TChild1, TChild2, TChild3, TChild4, TChild5>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", false),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            IDbTransaction transaction",
        "id, tChild1, tChild2, tChild3, tChild4, tChild5, transaction", "<TChild1, TChild2, TChild3, TChild4, TChild5>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", true),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            Expression<Func<TEntity, object>> tChild6",
        "id, tChild1, tChild2, tChild3, tChild4, tChild5, tChild6, null", "<TChild1, TChild2, TChild3, TChild4, TChild5, TChild6>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", false),
    Tuple.Create("FindById", @"object id,
            Expression<Func<TEntity, object>> tChild1,
            Expression<Func<TEntity, object>> tChild2,
            Expression<Func<TEntity, object>> tChild3,
            Expression<Func<TEntity, object>> tChild4,
            Expression<Func<TEntity, object>> tChild5,
            Expression<Func<TEntity, object>> tChild6,
            IDbTransaction transaction",
        "id, tChild1, tChild2, tChild3, tChild4, tChild5, tChild6, transaction", "<TChild1, TChild2, TChild3, TChild4, TChild5, TChild6>", "TEntity",
        @"/// <summary>
        ///     Get object by Id with join objects
        /// </summary>", true),

    Tuple.Create("FindAllBetween", "object from, object to, Expression<Func<TEntity, object>> btwField",
        "from, to, btwField, transaction: null", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with BETWEEN query
        /// </summary>", false),
    Tuple.Create("FindAllBetween", "object from, object to, Expression<Func<TEntity, object>> btwField, IDbTransaction transaction",
        "from, to, btwField, null, transaction", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with BETWEEN query
        /// </summary>", false),
    Tuple.Create("FindAllBetween", @"
            object from,
            object to,
            Expression<Func<TEntity, object>> btwField,
            Expression<Func<TEntity, bool>> predicate",
        "from, to, btwField, transaction: null", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with BETWEEN query
        /// </summary>", false),
    Tuple.Create("FindAllBetween", @"object from,
            object to,
            Expression<Func<TEntity, object>> btwField,
            Expression<Func<TEntity, bool>> predicate,
            IDbTransaction transaction",
        "from, to, btwField, null, transaction", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all objects with BETWEEN query
        /// </summary>", true),
    Tuple.Create("FindAllBetween", "DateTime from, DateTime to, Expression<Func<TEntity, object>> btwField",
        "from, to, btwField, transaction: null", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all DateTimes with BETWEEN query
        /// </summary>", false),
    Tuple.Create("FindAllBetween", "DateTime from, DateTime to, Expression<Func<TEntity, object>> btwField, IDbTransaction transaction",
        "from, to, btwField, null, transaction", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all DateTimes with BETWEEN query
        /// </summary>", false),
    Tuple.Create("FindAllBetween", @"
            DateTime from,
            DateTime to,
            Expression<Func<TEntity, object>> btwField,
            Expression<Func<TEntity, bool>> predicate",
        "from, to, btwField, transaction: null", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all DateTimes with BETWEEN query
        /// </summary>", false),
    Tuple.Create("FindAllBetween", @"DateTime from,
            DateTime to,
            Expression<Func<TEntity, object>> btwField,
            Expression<Func<TEntity, bool>> predicate,
            IDbTransaction transaction",
        "from, to, btwField, null, transaction", "", "IEnumerable<TEntity>",
        @"/// <summary>
        ///     Get all DateTimes with BETWEEN query
        /// </summary>", true),
}; #>
    public partial interface IReadOnlyDapperRepository<TEntity>
    {
<# foreach (var method in readonlyMethods)
{ #>
        <#= method.Item6 #>
        <#= method.Item5 #> <#= method.Item1 #><#= method.Item4 #>(<#= method.Item2 #>);

        <#= method.Item6 #>
        Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item2 #>);

        <#= method.Item6 #>
        Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item2 #><#= string.IsNullOrWhiteSpace(method.Item2) ? "" : ", " #>CancellationToken cancellationToken);

<# } #>
    }

    public partial class ReadOnlyDapperRepository<TEntity>
    {
<# foreach (var method in readonlyMethods)
{
    if (!method.Item7)
    { #>
        /// <inheritdoc />
        public virtual <#= method.Item5 #> <#= method.Item1 #><#= method.Item4 #>(<#= method.Item2 #>)
        {
            return <#= method.Item1 #><#= method.Item4 #>(<#= method.Item3 #>);
        }

<# } #>
        /// <inheritdoc />
        public virtual Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item2 #>)
        {
            return <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item3 #>, cancellationToken: default);
        }

<# if (!method.Item7)
   { #>
        /// <inheritdoc />
        public virtual Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item2 #><#= string.IsNullOrWhiteSpace(method.Item2) ? "" : ", " #>CancellationToken cancellationToken)
        {
            return <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item3 #>, cancellationToken: cancellationToken);
        }

<# } #>
<# } #>
    }
}
