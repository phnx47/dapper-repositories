<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace MicroOrm.Dapper.Repositories
{
<#
Func<string, string> parametersAddCancellationToken = parameters =>
{
    if (string.IsNullOrWhiteSpace(parameters)) return "CancellationToken cancellationToken";

    var index = parameters.LastIndexOf("params ", StringComparison.Ordinal);
    if (index < 0) return $"{parameters}, CancellationToken cancellationToken";

    index = parameters.Substring(0, index).LastIndexOf(",", StringComparison.Ordinal);
    return index > 0
        ? $"{parameters.Substring(0, index)}, CancellationToken cancellationToken{parameters.Substring(index)}"
        : $"CancellationToken cancellationToken, {parameters}";
};
Func<string, string, string, string> argumentsAddCancellationToken = (parameters, arguments, cancellationToken) =>
{
    if (string.IsNullOrWhiteSpace(arguments)) return $"{cancellationToken}";

    var index = parameters == null ? -1 : parameters.LastIndexOf("params ", StringComparison.Ordinal);
    if (index < 0) return $"{arguments}, {cancellationToken}";

    index = arguments.LastIndexOf(",", StringComparison.Ordinal);
    return index > 0
        ? $"{arguments.Substring(0, index)}, {cancellationToken}{arguments.Substring(index)}"
        : $"{cancellationToken}, {arguments}";
};
//Tuple.Create("ame", "parameters", "arguments", "generic type", "return type", "comment", "terminal method")
var readonlyMethods = new[]
{
    Tuple.Create("Insert", "TEntity instance",
        "instance, null", "", "bool",
        @"/// <summary>
        ///     Insert object to DB
        /// </summary>", false),
    Tuple.Create("Insert", "TEntity instance, IDbTransaction transaction",
        "instance, transaction", "", "bool",
        @"/// <summary>
        ///     Insert object to DB
        /// </summary>", true),
    Tuple.Create("BulkInsert", "IEnumerable<TEntity> instances",
        "instances, null", "", "int",
        @"/// <summary>
        ///     Bulk Insert objects to DB
        /// </summary>", false),
    Tuple.Create("BulkInsert", "IEnumerable<TEntity> instances, IDbTransaction transaction",
        "instances, transaction", "", "int",
        @"/// <summary>
        ///     Bulk Insert objects to DB
        /// </summary>", true),

    Tuple.Create("Update", "TEntity instance, params Expression<Func<TEntity, object>>[] includes",
        "instance, null, includes", "", "bool",
        @"/// <summary>
        ///     Update object in DB
        /// </summary>", false),
    Tuple.Create("Update", "TEntity instance, IDbTransaction transaction, params Expression<Func<TEntity, object>>[] includes",
        "instance, transaction, includes", "", "bool",
        @"/// <summary>
        ///     Update object in DB
        /// </summary>", true),
    Tuple.Create("Update", "Expression<Func<TEntity, bool>> predicate, TEntity instance, params Expression<Func<TEntity, object>>[] includes",
        "predicate, instance, null, includes", "", "bool",
        @"/// <summary>
        ///     Update object in DB
        /// </summary>", false),
    Tuple.Create("Update", "Expression<Func<TEntity, bool>> predicate, TEntity instance, IDbTransaction transaction, params Expression<Func<TEntity, object>>[] includes",
        "predicate, instance, transaction, includes", "", "bool",
        @"/// <summary>
        ///     Update object in DB
        /// </summary>", true),
    Tuple.Create("BulkUpdate", "IEnumerable<TEntity> instances",
        "instances, null", "", "bool",
        @"/// <summary>
        ///     Bulk Update objects to DB
        /// </summary>", false),
    Tuple.Create("BulkUpdate", "IEnumerable<TEntity> instances, IDbTransaction transaction",
        "instances, transaction", "", "bool",
        @"/// <summary>
        ///     Bulk Update objects to DB
        /// </summary>", true),
}; #>
    public partial interface IDapperRepository<TEntity>
    {
<# foreach (var method in readonlyMethods)
{ #>
        <#= method.Item6 #>
        <#= method.Item5 #> <#= method.Item1 #><#= method.Item4 #>(<#= method.Item2 #>);

        <#= method.Item6 #>
        Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item2 #>);

        <#= method.Item6 #>
        Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= parametersAddCancellationToken(method.Item2) #>);

<# } #>
    }

    public partial class DapperRepository<TEntity>
    {
<# foreach (var method in readonlyMethods)
{
    if (!method.Item7)
    { #>
        /// <inheritdoc />
        public virtual <#= method.Item5 #> <#= method.Item1 #><#= method.Item4 #>(<#= method.Item2 #>)
        {
            return <#= method.Item1 #><#= method.Item4 #>(<#= method.Item3 #>);
        }

<# } #>
        /// <inheritdoc />
        public virtual Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= method.Item2 #>)
        {
            return <#= method.Item1 #>Async<#= method.Item4 #>(<#= argumentsAddCancellationToken(method.Item2, method.Item3, "CancellationToken.None") #>);
        }

<# if (!method.Item7)
   { #>
        /// <inheritdoc />
        public virtual Task<<#= method.Item5 #>> <#= method.Item1 #>Async<#= method.Item4 #>(<#= parametersAddCancellationToken(method.Item2) #>)
        {
            return <#= method.Item1 #>Async<#= method.Item4 #>(<#= argumentsAddCancellationToken(method.Item2, method.Item3, "cancellationToken") #>);
        }

<# } #>
<# } #>
    }
}
